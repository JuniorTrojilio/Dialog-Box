unit Dialogs.OpenDialogs.Controllers;

interface

uses
  Dialogs.Interfaces, Vcl.Dialogs;

type
  TOpenDialogs = class(TInterfacedObject, iDialogs, iDialogOptions)
  private
    FOpenDialogs: TOpenDialog;
  public
    function ofReadOnly: iDialogOptions;
    function ofFileMustExist: iDialogOptions;
    function ofPathMustExist: iDialogOptions;
    function ofAllowMultiSelect: iDialogOptions;
    function ofForceShowHidden: iDialogOptions;
    function EndOptions: iDialogOptions;

    function DefaultExt(Value: String): iDialogs;
    function FilterIndex(Value: Integer): iDialogs;
    function InitialDir(Value: String): iDialogs;

    function AddOptions: iDialogOptions;

    constructor Create;
    destructor Destroy; override;
    class function New: iDialogs;
  end;

implementation

{ TOpenDialogs }

constructor TOpenDialogs.Create;
begin

end;

destructor TOpenDialogs.Destroy;
begin

  inherited;
end;

class function TOpenDialogs.New: iDialogs;
begin
  Result := Self.Create;
end;

function TOpenDialogs.AddOptions: iDialogOptions;
begin
  Result := Self;
end;

function TOpenDialogs.EndOptions: iDialogOptions;
begin

end;

function TOpenDialogs.DefaultExt(Value: String): iDialogs;
begin

end;

function TOpenDialogs.FilterIndex(Value: Integer): iDialogs;
begin

end;

function TOpenDialogs.InitialDir(Value: String): iDialogs;
begin

end;

function TOpenDialogs.ofAllowMultiSelect: iDialogOptions;
begin

end;

function TOpenDialogs.ofFileMustExist: iDialogOptions;
begin

end;

function TOpenDialogs.ofForceShowHidden: iDialogOptions;
begin

end;

function TOpenDialogs.ofPathMustExist: iDialogOptions;
begin

end;

function TOpenDialogs.ofReadOnly: iDialogOptions;
begin

end;

end.
