unit Dialogs.Method.OpenDialogs;

interface

uses
  Dialogs.Method.Interfaces, Vcl.Dialogs, System.Classes;

type
  TOpenDialogs = class(TInterfacedObject, iDialogs, iDialogParams,
    iDialogFilter, iDialogOption)
  private
    FOpenDialog: TOpenDialog;
    FFilter: TStringList;
    FOptions : TOpenOptions;
  public
    function Title(Value: String): iDialogParams;
    function InitialDir(Value: String): iDialogParams;
    function FilterIndex(Value: Integer): iDialogParams;

    function ofReadOnly: iDialogOption;
    function ofAllowMultiSelect: iDialogOption;
    function ofFileMustExist: iDialogOption;
    function EndOptions: iDialogParams;

    function AddXML: iDialogFilter;
    function AddPDF: iDialogFilter;
    function AddTXT: iDialogFilter;
    function AddAll: iDialogFilter;
    function AddFilter: iDialogFilter;

    function AddOption: iDialogOption;

    function EndFilter: iDialogParams;
    function Params: iDialogParams;
    function EndParams: iDialogs;

    function Execute(var pNameFile: String): Boolean;
    constructor Create;
    destructor Destroy; override;
    class function New: iDialogs;
  end;

implementation

{ TOpenDialogs }

constructor TOpenDialogs.Create;
begin
  FOpenDialog := TOpenDialog.Create(nil);
  FFilter := TStringList.Create;
end;

destructor TOpenDialogs.Destroy;
begin
  FOpenDialog.DisposeOf;
  FFilter.DisposeOf;
  inherited;
end;

class function TOpenDialogs.New: iDialogs;
begin
  Result := Self.Create;
end;

function TOpenDialogs.ofAllowMultiSelect: iDialogOption;
begin
  Result := Self;
  FOptions := FOptions + [ofAllowMultiSelect];
end;

function TOpenDialogs.ofFileMustExist: iDialogOption;
begin
  Result := Self;
  FOptions := FOptions + [ofFileMustExist];
end;

function TOpenDialogs.ofReadOnly: iDialogOption;
begin
  Result := Self;
  FOptions := FOptions + [ofReadOnly];
end;

function TOpenDialogs.Execute(var pNameFile: String): Boolean;
begin
  Result := FOpenDialog.Execute;
  pNameFile := FOpenDialog.FileName;
end;

function TOpenDialogs.FilterIndex(Value: Integer): iDialogParams;
begin
  Result := Self;
  FOpenDialog.FilterIndex := Value;
end;

function TOpenDialogs.InitialDir(Value: String): iDialogParams;
begin
  Result := Self;
  FOpenDialog.InitialDir := Value;
end;

function TOpenDialogs.Title(Value: String): iDialogParams;
begin
  Result := Self;
  FOpenDialog.Title := Value;
end;

function TOpenDialogs.Params: iDialogParams;
begin
  Result := Self;
end;

function TOpenDialogs.AddAll: iDialogFilter;
begin
  Result := Self;
  FFilter.Add('Todos os Arquivos (*.*) | * .*|');
end;

function TOpenDialogs.AddPDF: iDialogFilter;
begin
  Result := Self;
  FFilter.Add('Arquivos PDF (*.pdf) | * .pdf|');
end;

function TOpenDialogs.AddTXT: iDialogFilter;
begin
  Result := Self;
  FFilter.Add('Arquivos TXT (*.txt) | * .txt|');
end;

function TOpenDialogs.AddXML: iDialogFilter;
begin
  Result := Self;
  FFilter.Add('Arquivos XML (*.xml) | * .xml|');
end;

function TOpenDialogs.AddFilter: iDialogFilter;
begin
  Result := Self;
end;

function TOpenDialogs.AddOption: iDialogOption;
begin
  Result := Self;
end;

function TOpenDialogs.EndFilter: iDialogParams;
begin
  Result := Self;
  FOpenDialog.Filter := FFilter.Text;
end;

function TOpenDialogs.EndOptions: iDialogParams;
begin
  Result := Self;
  FOpenDialog.Options := FOptions;
end;

function TOpenDialogs.EndParams: iDialogs;
begin
  Result := Self;
end;

end.
