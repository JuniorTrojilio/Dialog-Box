unit Dialog.Controllers.Factory;

interface

uses
  Dialogs.Controllers.Method.OpenDialogs,
  Dialogs.Controllers.Method.SaveDialogs,
  System.Classes, Dialog.Controllers.Factory.Interfaces,
  Dialogs.Controllers.Method.Interfaces;

type
  TTypeDialogs = (tpOpenDialog, tpSaveDialog);

  TDialogFactory = class(TInterfacedObject, iDialogFactory)
  private
  public
    function CreateDialogs(TypeDialog: TTypeDialogs): iDialogs;
    constructor Create;
    destructor Destroy; override;
    class function New: iDialogFactory;
  end;

implementation

{ TDialogFactory }

constructor TDialogFactory.Create;
begin

end;

function TDialogFactory.CreateDialogs(TypeDialog: TTypeDialogs): iDialogs;
 begin
   case TypeDialog of
     tpOpenDialog: Result := TOpenDialogs.New;
     tpSaveDialog: Result := TSaveDialogs.New;
   end;
 end;

destructor TDialogFactory.Destroy;
begin

  inherited;
end;

// function TDialogFactory.CreateDialogs(TypeDialog: TTypeDialogs): iDialogs;
// begin
// case TypeDialog of
// tpOpenDialog:
// Result := TOpenDialogs.New;
// tpSaveDialog:
// Result := TSaveDialogs.New;
// end;
// end;

class function TDialogFactory.New: iDialogFactory;
begin
  Result := Self.Create;
end;

end.
